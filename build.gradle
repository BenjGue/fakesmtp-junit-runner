plugins {
    id "org.sonarqube" version "2.3"
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.1'
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'signing'


if (!project.hasProperty('ossrhUsername')) {
    ext.ossrhUsername="dumb"
    ext.ossrhPassword="dumb"
}

def isDevBuild
def isCiBuild
def isReleaseBuild
def sonatypeRepositoryUrl

//set build variables based on build type (release, continuous integration, development)
if(hasProperty("release")) {
    isReleaseBuild = true
    sonatypeRepositoryUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
} else if (hasProperty("ci")) {
    isCiBuild = true
    version += "-SNAPSHOT"
    sonatypeRepositoryUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
} else {
    isDevBuild = true
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

sonarqube {
    properties { property "sonar.exclusions", "**/*Generated.java" }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts { archives javadocJar, sourcesJar }

//********* artifact signing *********
if(isReleaseBuild) {
    signing { sign configurations.archives }
} else {
    task signArchives  	{
	// do nothing
    }
}

uploadArchives {
    repositories {
	mavenDeployer {
	    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

	    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
		authentication(userName: ossrhUsername, password: ossrhPassword)
	    }

	    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
		authentication(userName: ossrhUsername, password: ossrhPassword)
	    }

	    pom.project {
		name 'JUnit Fake SMTP Server Rule'
		packaging 'jar'
		description 'JUnit Rule to create a FakeSmtp server to write mailing integration tests'
		url 'https://github.com/sleroy/fakesmtp-junit-runner'

		scm {
		    connection 'scm:git:https://github.com/sleroy/fakesmtp-junit-runner.git'
		    developerConnection 'scm:git:https://github.com/sleroy/fakesmtp-junit-runner.git'
		    url 'https://github.com/sleroy/fakesmtp-junit-runner'
		}

		licenses {
		    license {
			name 'The Apache License, Version 2.0'
			url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
		    }
		}

		developers {
		    developer {
			id 'sleroy'
			name 'Sylvain Leroy'
			email 'contact@sylvainleroy.com'
		    }
		}
	    }
	}
    }
}


// In this section you declare the dependencies for your production and test code
dependencies {
    compile ("org.subethamail:subethasmtp:3.1.7") { exclude group: 'org.slf4j'  }
    compile group: 'commons-io', name: 'commons-io', version: '2.5'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.5'

    compileOnly "junit:junit:$JUNIT_VERSION"
    compileOnly group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'


    testCompile "junit:junit:$JUNIT_VERSION"
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.10.19'

    testCompile group: 'javax.mail', name: 'javax.mail-api', version: JAVAX_MAIL_API
    testCompile group: 'javax.mail', name: 'mail', version: JAVAX_MAIL
    testCompile group: 'com.sun.mail', name: 'javax.mail', version: JAVAX_MAIL_API
    testCompile "com.github.nithril:smtp-connection-pool:1.2.1"
}



jacocoTestReport {
    reports {
	xml.enabled = true // coveralls plugin depends on xml format report
	html.enabled = true
    }
}
